Os 3 pilares

EHP
E - Encapsulamento, basicamente é uma capsula - Significa ocultar partes independentes da implementação, permitindo construir partes invisíveis ao mundo exterior.
Um bom encapsulamento deve possuir uma boa Interface - é um lista de serviços fornecidos por um componente. É o contato com o mundo exterior, que define o que pode ser feito com um objeto dessa classe.

IMPORTANTE! Encapsular não é obrigátorio, mas é uma boa prática para produzir Classes mais eficientes.

Vantagens em encapsular:
    Tornar mudanças invisíveis
    Facilitar reutilização do código
    Reduzir efeitos colaterais

Interfaces não possui atributos só métodos

PARA CRIAR INTERFECES
<<interface Controle remoto>>
Controlador

+ ligar()
+ desligar()
+ abrirMenu()
+ fecharMenu()
+ maisVolume()
+ menosVolume()
+ ligarMudo()
+ desligarMudo()
+ play()
+ pause()

Diagrama de classe
ControleRemoto

<<atributos>>
- private volume
- private ligado
- private tocando

<<metodos>>
+ ligar()
+ desligar()
+ abrirMenu()
+ fecharMenu()
+ maisVolume()
+ menosVolume()
+ ligarMudo()
+ desligarMudo()
+ play()
+ pause()
- getVolume()
- setVolume()
- getLigado()
- setLigado()
- getTocando()
- setTocando()

Em outro arquivo  crie a inteface

interface Controlador
//Metodo abstratos, quando essew metodo é usado dentro da interface não é necessário colocar abstract
interface Controlador {
    public abstract function ligar();
    public abstract function desligar();
    public abstract function abrirMenu();
    public abstract function fecharMenu();
    public abstract function maisVolume();
    public abstract function menosVolume();
    public abstract function ligarMudo();
    public abstract function desligarMudo();
    public abstract function play();
    public abstract function pause();
}
FimIterface

Herança permite basear uma classe na definição de uma outra classe previamente existente.
A herança será aplicada tanto para caracteristicas quanto para comportamentos.
Herança também pode ser chamada de (Mãe, Progenitora, SuperClasse, Pai)
<Pessoa>
- nome
- idade
- sexo
+ fazerAniv()

<Aluno>
- matr
- curso
+ cancelarMatr()

<Professor>
- especialidade
- salario
+ receberAum()

<Funcionario>
- setor
- trabalho
+ mudarTrabalho()

Como percorrer uma arvore de heranças
Uma arvore em herança começa com a RAIZ em cima e vai se extendendo para baixo

Uma classe progenitora ou superclasse também pode ser um SUBCLASSE dependendo de quem está comparando

exemplo:
A é "SUPER CLASSE" de AA, AA é "SUBCLASSE" de A.
AA é "SUPER CLASSE" de AAA, AAA é "SUBCLASSE" de AA.
e por ai vai

Uma "SUBCLASSE" herda tudo que sua "SUPER CLASSE" possui, independente se seus métodos ou atributos estejam acessiveis ou não.

Quando uma "SUPER CLASSE" (que inicia) não é SUBCLASSE de ninguém ela é a 'RAIZ'  da arvore hieranquica.

quando uma "SUBCLASSE" não possui FILHA ela é chamada de "FOLHA"

A é "MÃE" de AA, AA é "FILHA" de A.
AA é "MÃE" de AAA, AAA é "FILHA" de AA.
AAA É "DESCENDENTE" de A (não se deve considerar a MÃE como descendente) e A é "ANCESTRAL" de AAA

quando pegamos da RAIZ da arvore de vamos descendo, para os seus filhos e descendentes, chamamos de Especialização
Quando pegamos do inverso da RAIZ da arvore chamamos de Generalização
De cima para baixo é especialização 
De baixo para cima é Generalização

TIPOS DE HERANÇA

1 - HERANÇA DE IMPLEMENTAÇÃO
- Quando uma herança não implementa nada ela é chamada de herança pobre, pois apenas herda as caracteristicas da mãe

2 - HERANÇA PARA DIFERENÇA 
Quando uma subclasse pussui métodos e atributos e herda as propriedade e metodos da super classe essa herança é chamada de HERANÇA PARA IMPLEMENTAÇÃO

CLASSE ABSTRATA
 - Não pode ser instanciada. Só pode servir como progenitora.
 - não é possível criar objetos com essa classe

MÉTODO ABSTRATO
- Declarado, mas não implementado na progenitora.

CLASSE FINAL
- Não pode ser herdada por outra classe. Obrigatoriamente folha.

MÉTODO FINAL
Não pode ser sobrescrito palas suas sub-classes. Obrigatoriamente herdado.


POLIMORFISMO
é a forma de instanciar metodos iguais, mas de jeitos diferentes

quando uma classe estiver com "FINAL" ele não vai poder ter filhos.
quando um método estiver com "FINAL"  ele não poderá ter seus métodos sobrescritos