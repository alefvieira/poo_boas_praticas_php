Os 3 pilares

EHP
E - Encapsulamento, basicamente é uma capsula - Significa ocultar partes independentes da implementação, permitindo construir partes invisíveis ao mundo exterior.
Um bom encapsulamento deve possuir uma boa Interface - é um lista de serviços fornecidos por um componente. É o contato com o mundo exterior, que define o que pode ser feito com um objeto dessa classe.

IMPORTANTE! Encapsular não é obrigátorio, mas é uma boa prática para produzir Classes mais eficientes.

Vantagens em encapsular:
    Tornar mudanças invisíveis
    Facilitar reutilização do código
    Reduzir efeitos colaterais

Interfaces não possui atributos só métodos

PARA CRIAR INTERFECES
<<interface Controle remoto>>
Controlador

+ ligar()
+ desligar()
+ abrirMenu()
+ fecharMenu()
+ maisVolume()
+ menosVolume()
+ ligarMudo()
+ desligarMudo()
+ play()
+ pause()

Diagrama de classe
ControleRemoto

<<atributos>>
- private volume
- private ligado
- private tocando

<<metodos>>
+ ligar()
+ desligar()
+ abrirMenu()
+ fecharMenu()
+ maisVolume()
+ menosVolume()
+ ligarMudo()
+ desligarMudo()
+ play()
+ pause()
- getVolume()
- setVolume()
- getLigado()
- setLigado()
- getTocando()
- setTocando()

Em outro arquivo  crie a inteface

interface Controlador
//Metodo abstratos, quando essew metodo é usado dentro da interface não é necessário colocar abstract
interface Controlador {
    public abstract function ligar();
    public abstract function desligar();
    public abstract function abrirMenu();
    public abstract function fecharMenu();
    public abstract function maisVolume();
    public abstract function menosVolume();
    public abstract function ligarMudo();
    public abstract function desligarMudo();
    public abstract function play();
    public abstract function pause();
}
FimIterface

Herança permite basear uma classe na definição de uma outra classe previamente existente.
A herança será aplicada tanto para caracteristicas quanto para comportamentos.
Herança também pode ser chamada de (Mãe, Progenitora, SuperClasse, Pai)
<Pessoa>
- nome
- idade
- sexo
+ fazerAniv()

<Aluno>
- matr
- curso
+ cancelarMatr()

<Professor>
- especialidade
- salario
+ receberAum()

<Funcionario>
- setor
- trabalho
+ mudarTrabalho()


